#!/bin/bash

BASE=$PWD
NONO=$BASE/nono

pkg_prepare() {
  local pkg=$1

  pkg_open

  local preffered=$(nproc)
  local max=$(($preffered+1))

  if [[ -z $JOBS ]] || (($JOBS > $max)); then
    JOBS=$preffered
  fi

  ARCH=x86_64
  TARGET=$ARCH-linux-musl
  HOST=$($CC -dumpmachine)

  CONFIGURE="./configure --prefix=$PREFIX"
  MAKE="make -j$JOBS"
  INSTALL="$MAKE DESTDIR=$ROOT install"

  BIN_PREFIX=$PREFIX/bin
  BIN=$ROOT$BIN_PREFIX

  ETC_PREFIX=$PREFIX/etc
  ETC=$ROOT$ETC_PREFIX

  INCLUDE_PREFIX=$PREFIX/include
  INCLUDE=$ROOT$INCLUDE_PREFIX

  LIB_PREFIX=$PREFIX/lib
  LIB=$ROOT$LIB_PREFIX

  SHARE_PREFIX=$PREFIX/share
  SHARE=$ROOT$LIB_PREFIX

  MAN_PREFIX=$SHARE_PREFIX/man
  MAN=$ROOT$MAN_PREFIX

  CFLAGS="-fno-unwind-tables -fno-asynchronous-unwind-tables -Wa,--noexecstack -fno-math-errno"
  LDFLAGS="-Wl,-z,relro,-z,now -Wl,-z,text"

  [[ -z $OPT ]] && OPT=yes
  [[ -z $SECURE ]] && SECURE=yes

  if [[ $OPT = yes ]]; then
    CFLAGS="$CFLAGS -O3 -fstrength-reduce -fthread-jumps -fcse-follow-jumps -fcse-skip-blocks -frerun-cse-after-loop -fexpensive-optimizations -fforce-addr -fomit-frame-pointer"
  else
    CFLAGS="$CFLAGS -Os -g0 -fdata-sections -ffunction-sections"
    LDFLAGS="$LDFLAGS -Wl,--gc-sections"
  fi

  if [[ $SECURE = yes ]]; then
    CFLAGS="$CFLAGS -fPIE -fstack-protector"
    LDFLAGS="$LDFLAGS -fpie"
  fi

  if [[ $STATIC = yes ]]; then
    LDFLAGS="$LDFLAGS -static"
  fi

  if [[ -z $SILENT ]]; then
    if [[ $DEBUG = yes ]]; then
      SILENT=no
    else
      SILENT=yes
    fi
  fi

  unset $OPT
  unset $SECURE

  export PREFIX
  export CFLAGS LDFLAGS
}

pkg_extract() {
  cd $DL

  if [[ $FILENAME != *"zip"* ]]; then
    mkdir $WORK
  fi

  case $FILENAME in
  *.zip) unzip $FILENAME -d $WORK &>/dev/null ; ;;
  *.tgz|*.gz) tar xzvf $FILENAME -C $WORK --strip-components 1 &>/dev/null ; ;;
  *.tbz2|*.bz2) tar xjvf $FILENAME -C $WORK --strip-components 1 &>/dev/null ; ;;
  *.xz) tar xf $FILENAME -C $WORK --strip-components 1 &>/dev/null ; ;;
  esac
}

pkg_download() {
  info "downloading $PKG"

  if [[ $GIT = yes ]]; then
    cd $BUILD

    command="git clone $src $NAME --recurse-submodules"
  else
    cd $DL

    command="wget --no-check-certificate $src -O $FILENAME"
  fi

  if [[ $SILENT = yes ]]; then
    $command &>/dev/null
  else
    $command
  fi
}

pkg_configure() {
  info "configuring $PKG"

  if ! fn_exists configure; then
    if [[ -e CMakeLists.txt ]]; then
      mkdir -p build
      cd build

      if [[ $SILENT = yes ]]; then
        cmake .. &>/dev/null
      else
        cmake ..
      fi
    elif [[ -e configure ]]; then
      grep -q '--prefix' configure &>/dev/null

      if [ $? -eq 0 ]; then
        $CONFIGURE
      else
        ./configure
      fi
    fi
  else
    if [[ $SILENT = yes ]]; then
      configure &>/dev/null
    else
      configure
    fi
  fi
}

pkg_build() {
  info "compiling $NAME"

  if [[ -d $PATCHES ]]; then
    for patch in $PATCHES/*; do
      patch -p1 < $patch &>/dev/null
    done
  fi

  if ! fn_exists build; then
    if [[ -e Makefile ]]; then
      if [[ $SILENT = yes ]]; then
        $MAKE &>/dev/null
      else
        $MAKE
      fi
    else
      die "no build() in package $PKG"
    fi
  else
    if [[ $SILENT = yes ]]; then
      build &>/dev/null
    else
      build
    fi
  fi

  local error=yes

  for file in "${files[@]}"; do
    [[ -d $file ]] || [[ -e $file ]] && error=no
  done

  [[ $error = yes && $DEBUG != yes ]] && \
    die "build error on $PKG package"
}

pkg_package() {
  info "packaging $NAME"

  if ! fn_exists install; then
    if [[ -e Makefile ]]; then
      grep -q 'install:' Makefile &>/dev/null

      if [ $? -eq 0 ]; then
        $INSTALL
      fi
    fi
  else
    if [[ $SILENT = yes ]]; then
      install &>/dev/null
    else
      install
    fi
  fi
}

pkg_installs() {
  pkg

  if [[ $PKGTYPE = normal ]] || [[ $PKGTYPE = git ]]; then
    if pkg_exists $PKG; then
      die "package $PKG is already installed"
    fi

    for dep in "${deps[@]}"; do
      if ! pkg_exists $dep; then
        sh $NONO -i $dep
      fi
    done

    local installed=no

    if [[ -d $WORK ]]; then
      cd $WORK

      for file in "${files[@]}"; do
        [[ -d $file ]] || [[ -e $file ]] && installed=yes
      done

      cd $BASE
    fi

    if [[ $installed = yes ]]; then
      info "installed missing built package: $PKG"
      echo $PKG >> $PKGS
      return
    fi

    info "installing $NAME"
  fi

  if [[ $PKGTYPE = normal ]]; then
    if [[ ! -d $WORK ]] && [[ ! -e $FILE ]]; then
      pkg_download
    fi

    if [[ ! -e $FILE ]]; then
      die "failed to download pkg: $PKG"
    elif [[ ! -d $WORK ]]; then
      pkg_extract
    fi

    if [[ ! -d $WORK ]]; then
      die "failed to extract package: $PKG"
    elif [[ -d $FILES ]]; then
      yes | \cp -rf $FILES/* $WORK
    fi

    cd $WORK

    pkg_configure
    pkg_build
    pkg_package
  elif [[ $PKGTYPE = git ]]; then
    if [[ ! -d $WORK ]]; then
      pkg_download
    fi

    if [[ ! -d $WORK ]]; then
      die "failed to clone $NAME"
    else
      if [[ -d $FILES ]]; then
        yes | \cp -rf $FILES/* $WORK
      fi

      cd $WORK

      pkg_build
      pkg_configure
      pkg_package
    fi
  else
    if pkg_exists $PKG; then
      found=no

      for dep in ${deps[@]}; do
        if ! pkg_exists $dep; then
          found=yes
          sh $NONO -i $dep
        fi
      done

      if [[ $found = no ]]; then
        info "nothing to do"
      fi

      return
    else
      for dep in "${deps[@]}"; do
        sh $NONO -i $dep
        if ! pkg_exists $dep; then
          return
        fi
      done
    fi
  fi

  echo $PKG >> $PKGS

  if [[ $PKGTYPE != group ]]; then
    info "package $PKG installed successfully"
  fi
}

####### up is old code #####################

############## package storage ################################

entry_exists() {
  [[ ! -e $PKGS ]] && \
    return 1

  return $(grep -q "$1" $PKGS)
}

add_entry() {
  [[ ! -e $PKGS ]] && \
    return 1

  echo "$1" >> $PKGS
  return 0
}

#

####### log ##########

die() {
  echo "$@"
  exit 1
}

####### utils ##########

read_setting() {
  if [[ ! -e $2 ]]; then
    echo ""
    return
  fi

  line=$(grep "${1}=" $2)
  value=${line#*=}
  value=${value//(}
  value=${value//)}
  echo $value
}

array_contains() {
    local seeking=$1; shift
    local in=1
    for element; do
        if [[ $element == "$seeking" ]]; then
            in=0
            break
        fi
    done
    return $in
}

fn_exists() {
  if type $1 2>/dev/null | grep -q 'function'; then
    return 0
  fi
  return 1
}

########### preparation ##############

# needed when installing something
config() {
  [[ -z $ROOT ]] && \
    ROOT=$(dirname $PWD)

  [[ -d $ROOT/pkg ]] || \
    die "invalid root"

  [[ -z $INSTALL ]] && \
    INSTALL=$ROOT

  PKGDIR=$ROOT/pkg
  PKGS=$ROOT/pkgs

  SRC=$ROOT/src
  BUILD=$SRC/build
  DL=$SRC/dl

  if [[ -e $BASE/config ]]; then
    . $BASE/config
  elif [[ -e $SRC/config ]]; then
    . $SRC/config
  fi

  [[ -z $CC ]] && CC=gcc

  [[ -e /bin/$CC ]] || \
    die "missing compiler: $CC"

  HOSTCC=$CC
}

# used for packages, not groups
read_recipe() {
  local pkg=$1

  local pkgdir=$ROOT/pkg/$pkg

  local small

  [[ -e $pkgdir ]] && \
    small=yes

  [[ -d $pkgdir ]] && \
    small=no

  [[ -z $small ]] && \
    echo "" && return

  if [[ $small = yes ]]; then
    echo $pkgdir
  else
    echo $pkgdir/build
  fi
}

################### Group handling #################

# example:

# base:
# option=USERLAND
# options=(base-suckless base-busybox)

# set_option base busybox -> USERLAND=busybox
# get_option base -> USERLAND

# get_option_value base -> busybox
# get_choose: get_option_value with checks

# notes:
# default option is first
# only group (main) will be count as installed
# 'config' file can override options (USERLAND), else it will be asked, if timeout, default

#############################################

is_group() {
  [[ -z $(read_setting options $ROOT/pkg/$1) ]] && return 1 || return 0
}

is_option() {
  return $(is_group $(read_setting group $(read_recipe $1)))
}

option_set() {
  [[ ! -z $(get_option_value $1) ]] && return 1 || return 0
}

get_option_value() {
  local option=$(get_option $1)

  echo "${!option}"
}

get_option() {
  echo $(read_setting option $ROOT/pkg/$1)
}

set_option() {
  local option=$(get_option $1)
  local choose=$2

  eval $option=$choose

  [[ -z $option ]] || [[ -z $choose ]] && return 1 || return 0
}

get_choose() {
  local name=$1

  if is_group $name; then
    local options=$(read_setting options $ROOT/pkg/$name)

    local choose=$(get_option_value $name)

    # default
    if [[ -z $choose ]]; then
      temp=$options
      set -- $temp
      choose=$1
    fi

    if array_contains $choose ${options[@]}; then
      echo $choose
    else
      echo ""
    fi
  fi
}

############# packages ##########

settings=(name ver src deps group files)

pkg_exists() {
  [[ -z $(read_recipe $1) ]] && return 1 || return 0
}

pkg_installed() {
  local pkg=$1

  if ! pkg_exists $pkg; then
    return 1
  fi

  if is_group $pkg; then
    local options=$(read_setting options $file)

    for option in ${options[@]}; do
      if entry_exists $option; then
        return 0
      fi
    done
  else
    return $(entry_exists $pkg)
  fi

  return 1
}

install_pkg() {
  local pkgs=()

  for pkg in $@; do
    if ! array_contains $pkg ${pkgs[@]}; then
      pkgs+=($pkg)
    fi
  done

  config

  local list=()

  for pkg in ${pkgs[@]}; do
    local file=$(read_recipe $pkg)

    if [[ -z $file ]]; then
      echo "package $pkg doesnt exist"
      continue
    fi

    for dep in $(read_setting deps $file); do
      if ! array_contains $dep ${list[@]}; then
        list+=($dep)
      fi
    done

    list+=($pkg)
  done

  for pkg in ${list[@]}; do
    local file=$(read_recipe $pkg)

    if [[ -z $file ]]; then
      echo "dependency $pkg doesnt exist"
      local error=yes
      continue
    fi

    if [[ $error = yes ]]; then
      echo "package $pkg error"
      continue
    fi

    pkg_install $pkg
  done
}

ask_options() {
  local pkg=$1
  return
  echo "choose options for: $pkg"
  echo "todo"
  #set_option $pkg base-suckless
}

pkg_install() {
  local pkg=$1

  if pkg_installed $pkg; then
    echo "package $pkg is already installed"
    return
  fi

  if is_group $pkg; then
    if ! option_set $pkg; then
      ask_options $pkg
    fi

    local choose=$(get_choose $pkg)

    if [[ -z $choose ]]; then
      echo "option is set wrong: $pkg"
      return
    fi

    if ! pkg_exists $choose; then
      echo "option $choose package doesnt exist: $pkg"
      return
    fi

    install_pkg $choose

    return
  fi

  echo "installing: $pkg"

  local file=$(read_recipe $pkg)

  local small=yes

  if [[ $file == *"build"* ]]; then
    small=no
  fi

  for setting in ${settings[@]}; do
    declare local $setting=$(read_setting $setting $file)
  done

  if [[ ! -z $name ]] && [[ $name != *" "* ]]; then
    name=${name,,}
    pkg=$name
  fi

  local git=no

  if [[ ! -z $src ]]; then
    local filename=$(basename $src)

    if [[ $src == *"git"* ]] && [[ $filename != *"."* ]]; then
      git=yes
    fi
  fi

  local pkgtype

  if [[ $git = yes ]]; then
    pkgtype=git
  elif [[ ! -z $src ]]; then
    pkgtype=normal
  elif [[ ! -z $deps ]]; then
    pkgtype=group
  else
    echo "empty package: $pkg"
    return 1
  fi

  if [[ $pkgtype = normal ]]; then
    local file=$DL/$filename
    local work=$BUILD/$name
  elif [[ $pkgtype = git ]]; then
    local work=$BUILD/$name

    unset $filename
  elif [[ $pkgtype = group ]]; then
    unset $ver
  fi

  #if [[ $pkgtype = normal ]] || [[ $pkgtype = git ]]; then
  #  [[ -z $files ]] && [[ $DEBUG != yes ]] && \
  #    echo "missing files setting" && return 1
  #fi

  if [[ -z $ver ]]; then
    name=$pkg
  else
    name=$pkg-$ver
  fi

  local pkgfile pkgdir files patches

  pkgdir=$PKGDIR/$pkg

  if [[ $small = no ]]; then
    FILES=$pkgdir/files
    PATCHES=$pkgdir/patches
    STUFF=$pkgdir/stuff
  fi

  if $(check_installed $work $files); then
    echo "installed missing built package: $pkg"
    add_entry $pkg
    return
  fi

  pkg_build $pkg

  if $(check_installed $work $files); then
    echo "package $pkg is installed successfully"
    add_entry $pkg
  else
    echo "package is failed to install: $pkg"
  fi
}

check_installed() {
  local work=$1
  local files=$2

  if [[ -d $work ]]; then
    cd $work

    for file in "${files[@]}"; do
      [[ -d $file ]] || [[ -e $file ]] && return 0
    done

    cd $base
  fi

  return 1
}

pkg_download() {
  local src=$1
  local target=$2
}

pkg_build() {
  local pkg=$1
  local pkgfile=$(read_recipe $pkg)

  [[ -e $pkgfile ]] && . $pkgfile

  if fn_exists build; then
    build
  fi
}

remove_pkg() {
  local pkgs=()

  for pkg in $@; do
    if ! array_contains $pkg ${pkgs[@]}; then
      pkgs+=($pkg)
    fi
  done

  config

  local list=()

  for pkg in ${pkgs[@]}; do
    echo $pkg
  done

  #sed -i "/$PKG/d" $PKGS
}

help() {
  echo "todo"
}

run() {
  action=$1 && shift

  case $action in
  -i) install_pkg $@ ; ;;
  -r) remove_pkg $@ ; ;;
  *) help ; ;;
  esac
}

run $@