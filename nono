#!/bin/bash

PKG=$2
PKGS=$ROOT/pkgs

NONO=$PWD/nono

config() {
  [[ -z $ROOT ]] && \
    ROOT=$(dirname $PWD)

  [[ -d $ROOT/pkg ]] || \
    die "invalid root"

  [[ -z $INSTALL ]] && \
    INSTALL=$ROOT

  SRC=$ROOT/src
  PKGDIR=$ROOT/pkg/$PKG
}

pkg_open() {
  config

  [[ -e $PKGDIR ]] && \
    SMALL=yes

  [[ -d $PKGDIR ]] && \
    SMALL=no

  [[ -z $SMALL ]] && \
    die "package $PKG does not exist"
}

pkg_configure() {
  pkg_open

  if [[ -e $PWD/config ]]; then
    . $PWD/config
  elif [[ -e $SRC/config ]]; then
    . $SRC/config
  fi

  [[ -z $CC ]] && CC=gcc

  if [[ ! -e /bin/$CC ]]; then
    die "missing compiler: $CC"
  fi

  if [[ $SMALL = yes ]]; then
    PKGFILE=$PKGDIR
  else
    PKGFILE=$PKGDIR/build
    FILES=$PKGDIR/files
    PATCHES=$PKGDIR/patches
    STUFF=$PKGDIR/stuff
  fi

  . $PKGFILE

  if [[ ! -z "$name" ]] && [[ $name != *" "* ]]; then
    name=${name,,}
    PKG=$name
    unset $name
  fi

  GIT=no

  if [[ ! -z $src ]]; then
    FILENAME=$(basename $src)

    if [[ $src == *"git"* ]] && [[ $FILENAME != *"."* ]]; then
      GIT=yes
    fi
  fi

  if ! fn_exists build; then
    if [[ ! -z $deps ]]; then
      PKGTYPE=group
    else
      die "empty package: $PKG"
    fi
  else
    if [[ $GIT = yes ]]; then
      PKGTYPE=git
    elif [[ ! -z $src ]]; then
      if [[ -z $type ]]; then
        die "missing type in package $PKG"
      fi

      PKGTYPE=normal
    else
      PKGTYPE=script
    fi
  fi

  if [[ -z $ver ]]; then
    NAME=$PKG
  else
    NAME=$PKG-$ver
  fi

  BUILD=$SRC/build

  if [[ $PKGTYPE = normal ]]; then
    DL=$SRC/dl

    FILE=$DL/$FILENAME
    WORK=$BUILD/$NAME
  elif [[ $PKGTYPE = git ]]; then
    WORK=$BUILD/$NAME

    unset $FILENAME
    unset $type
  elif [[ $PKGTYPE = script ]]; then
    WORK=$SRC/work

    unset $type
  elif [[ $PKGTYPE = group ]]; then
    unset $ver
  fi

  if [[ $PKGTYPE = normal ]] || [[ $PKGTYPE = git ]]; then
    [[ -z $files ]] && \
      die "missing files setting"
  fi

  local preffered=$(($(nproc)+1))

  if [[ -z $JOBS ]] || (($JOBS > $preffered)); then
    JOBS=$preffered
  fi

  TARGET="x86_64-linux-musl"
  HOST=$($CC -dumpmachine)

  CONFIGURE="./configure --prefix=$PREFIX --with-sysroot=$ROOT"
  MAKE="make -j$JOBS"
  MAKE_INSTALL="$MAKE DESTDIR=$ROOT install"

  export PREFIX=$PREFIX

  [[ -z $OPT ]] && OPT=yes
  [[ -z $SECURE ]] && SECURE=yes
  [[ -z $STATIC ]] && STATIC=no

  CFLAGS="-fno-unwind-tables -fno-asynchronous-unwind-tables -Wa,--noexecstack -fno-math-errno"
  LDFLAGS="-Wl,-z,relro,-z,now -Wl,-z,text"

  if [[ $OPT = yes ]]; then
    CFLAGS="$CFLAGS -O3 -fstrength-reduce -fthread-jumps -fcse-follow-jumps -fcse-skip-blocks -frerun-cse-after-loop -fexpensive-optimizations -fforce-addr -fomit-frame-pointer"
  else
    CFLAGS="$CFLAGS -Os -g0 -fdata-sections -ffunction-sections"
    LDFLAGS="$LDFLAGS -Wl,--gc-sections"
  fi

  if [[ $SECURE = yes ]]; then
    CFLAGS="$CFLAGS -fPIE -fstack-protector"
    LDFLAGS="$LDFLAGS -fpie"
  fi

  if [[ $STATIC = yes ]]; then
    LDFLAGS="$LDFLAGS -static"
  fi

  unset $OPT
  unset $SECURE
  unset $STATIC

  export CFLAGS=$CFLAGS
  export LDFLAGS=$LDFLAGS
}

pkg_extract() {
  cd $DL

  if [[ $type != "zip" ]]; then
    mkdir $WORK
  fi

  case $FILENAME in
  *.zip) unzip $FILENAME -d $WORK ; ;;
  *.tgz|*.gz) tar xzvf $FILENAME -C $WORK --strip-components 1 ; ;;
  *.tbz2|*.bz2) tar xjvf $FILENAME -C $WORK --strip-components 1 ; ;;
  *.xz) tar xf $FILENAME -C $WORK --strip-components 1 ; ;;
  esac
}

pkg_download() {
  if [[ $GIT = yes ]]; then
    cd $BUILD

    git clone $src $NAME
  else
    cd $DL

    wget --no-check-certificate $src -O $FILENAME
  fi
}

pkg_build() {
  info "building $NAME"

  cd $WORK

  if [[ -d $PATCHES ]]; then
    for patch in $PATCHES/*; do
      patch -p1 < $patch
    done
  fi

  build

  error=yes

  for file in "${files[@]}"; do
    [[ -d $file ]] || [[ -e $file ]] && error=no
  done

  [[ $error = yes ]] && \
    die "build error on $PKG package"
}

pkg_install() {
  pkg_configure

  if [[ $PKGTYPE = normal ]] || [[ $PKGTYPE = git ]]; then
    if pkg_exists $PKG; then
      die "package $PKG is already installed"
    fi

    for dep in "${deps[@]}"; do
      if ! pkg_exists $dep; then
        sh $NONO -i $dep
      fi
    done

    local installed=no

    if [[ -d $WORK ]]; then
      cd $WORK
      for file in "${files[@]}"; do
        [[ -d $file ]] || [[ -e $file ]] && installed=yes
      done
      cd $ROOT
    fi

    if [[ $installed = yes ]]; then
      info "installed missing built package: $PKG"
      echo $PKG >> $PKGS
      return
    fi
  fi

  if [[ $PKGTYPE = normal ]]; then
    info "installing package $NAME"

    if [[ ! -d $WORK ]] && [[ ! -e $FILE ]]; then
      pkg_download
    fi

    if [[ ! -e $FILE ]]; then
      die "failed to download pkg: $PKG"
    elif [[ ! -d $WORK ]]; then
      pkg_extract
    fi

    if [[ ! -d $WORK ]]; then
      die "failed to extract package: $PKG"
    elif [[ -d $FILES ]]; then
      yes | \cp -rf $FILES/* $WORK
    fi

    pkg_build

    if fn_exists install; then
      install
    fi
  elif [[ $PKGTYPE = git ]]; then
    if [[ ! -d $WORK ]]; then
      pkg_download
    fi

    if [[ ! -d $WORK ]]; then
      die "failed to clone $NAME"
    else
      if [[ -d $FILES ]]; then
        yes | \cp -rf $FILES/* $WORK
      fi

      pkg_build

      if fn_exists install; then
        install
      fi
    fi
  elif [[ $PKGTYPE = script ]]; then
    info "executing script $NAME"

    if [[ -d $FILES ]]; then
      yes | \cp -rf $FILES/* $WORK
    fi

    cd $WORK

    if build; then
      info "script run successfully: $NAME"
    else
      info "$NAME script resulted with error"
    fi

    return
  else
    if pkg_exists $PKG; then
      found=no

      for dep in "${deps[@]}"; do
        if ! pkg_exists $dep; then
          found=yes
          sh $NONO -i $dep
        fi
      done

      if [[ $found = no ]]; then
        info "nothing to do"
      fi

      return
    else
      info "installing package group: $NAME"

      for dep in "${deps[@]}"; do
        sh $NONO -i $dep
        if ! pkg_exists $dep; then
          return
        fi
      done

      info "package group $PKG installed successfully"
    fi
  fi

  echo $PKG >> $PKGS

  if [[ $PKGTYPE != group ]]; then
    info "package $PKG installed successfully"
  fi
}

pkg_exists() {
  while read line; do
    if [[ $line == $1 ]]; then
      return 0
    fi
  done < $PKGS
  return 1
}

pkg_remove() {
  pkg_configure

  if fn_exists remove; then
    if remove; then
      sed -i "/$PKG/d" $PKGS
    fi
  fi
}

pkg_info() {
  pkg_open

  if [[ $SMALL = yes ]]; then
    PKGFILE=$PKGDIR
  else
    PKGFILE=$PKGDIR/build
  fi

  . $PKGFILE

  [[ -z $desc ]] && \
    die "no info found"

  echo $desc
}

function cecho(){
    local exp=$1;
    local color=$2;
    if ! [[ $color =~ '^[0-9]$' ]] ; then
       case $(echo $color | tr '[:upper:]' '[:lower:]') in
        black) color=0 ;;
        red) color=1 ;;
        green) color=2 ;;
        yellow) color=3 ;;
        blue) color=4 ;;
        magenta) color=5 ;;
        cyan) color=6 ;;
        white|*) color=7 ;; # white or invalid color
       esac
    fi
    tput setaf $color;
    echo $exp;
    tput sgr0;
}

info() {
  cecho "> $@" red
}

die() {
  info "$@"
  exit 1
}

help() {
  info "nono -i package: install"
  info "nono -r package: remove"
  info "nono -I package: info"
  info "nono -e package: exists"
}

[[ -z $PKG ]] && \
  die "provide a package name"

fn_exists() {
  if type $1 2>/dev/null | grep -q 'function'; then
    return 0
  fi
  return 1
}

case $1 in
-i) pkg_install ; ;;
-r) pkg_remove ; ;;
-I) pkg_info ; ;;
-e) exit $(pkg_exists $PKG) ; ;;
*) help ; ;;
esac